{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["SababaForm","props","state","email","password","firstName","lastName","handleSubmit","bind","handleChange","event","inputValue","target","value","stateField","name","this","setState","console","log","preventDefault","axios","post","Form","Group","as","Row","controlId","Label","column","sm","Col","Control","type","placeholder","Text","id","muted","Button","variant","onSubmit","onChange","defaultValue","className","htmlFor","src","width","height","alt","onClick","min","max","step","Check","inline","label","map","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1d038b8b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Form from 'react-bootstrap/Form';\nimport { Button, Row, Col, } from \"react-bootstrap\";\n\nexport default class SababaForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { //gets updated here\n            email: '',\n            password: '',\n            firstName: '',\n            lastName: ''\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this); //when functions are passed, we have to bind 'this'\n    }\n\n    handleChange(event) {\n        //when event happens, we look at event value and set the state\n        const inputValue = event.target.value;\n        const stateField = event.target.name;\n        this.setState({\n            [stateField]: inputValue,\n        });\n        console.log(this.state);\n    }\n    async handleSubmit(event) {\n        event.preventDefault();\n        const { email, password, firstName, lastName } = this.state;\n        await axios.post(\n            'https://up076quzuj.execute-api.us-east-1.amazonaws.com/dev/users',\n            { email: `${email}`, password: `${password}`, \n            firstName: `${firstName}`, lastName: `${lastName}` }\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>Log In</h3>\n                <Form >\n                    <Form.Group as={Row} controlId=\"formPlaintextEmail\">\n                        <Form.Label column sm=\"2\">\n                            Username\n                        </Form.Label>\n                        <Col sm=\"10\">\n                            <Form.Control type=\"text\" placeholder=\"JohnSmith\" />\n                        </Col>\n\n                    </Form.Group>\n\n                    <Form.Group as={Row} controlId=\"formPlaintextPassword\">\n                        <Form.Label column sm=\"2\">\n                            Password\n                        </Form.Label>\n\n                        <Col sm=\"10\">\n                            <Form.Control type=\"password\" placeholder=\"Password\" />\n                            <Form.Text id=\"passwordHelpBlock\" muted>\n                                Your password must be 8-20 characters long and must not contain spaces, special characters, or emoji.\n                            </Form.Text>\n                        </Col>\n                        <br></br> <br></br>\n                        <Col>\n                            <Button variant=\"secondary\" type=\"submit\">\n                                Log in\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n\n                <br></br><br></br>\n\n                <h3>Sign Up</h3>\n                <Form onSubmit={this.handleSubmit}>\n\n                    <Form.Group as={Col} controlId=\"formGridEmail\">\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control type=\"\" placeholder=\"Enter email\" name=\"email\"\n                            onChange={this.handleChange} value={this.state.email} />\n                    </Form.Group>\n\n                    <Form.Group as={Col} controlId=\"formGridPassword\">\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control type=\"password\" placeholder=\"Password\" name=\"password\"\n                            onChange={this.handleChange} value={this.state.password} />\n                        <Form.Text id=\"passwordHelpBlock\" muted>\n                            Your password must be 8-20 characters long, contain letters and numbers, and\n                            must not contain spaces, special characters, or emoji.\n                        </Form.Text>\n                    </Form.Group>\n\n                    <Form.Row>\n                        <Form.Group as={Col} controlId=\"firstName\">\n                            <Form.Label>First Name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"John\" name=\"firstName\"\n                            onChange={this.handleChange}/>\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"lastName\">\n                            <Form.Label>Last Name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Smith\" name=\"lastName\"\n                            onChange={this.handleChange}/>\n                        </Form.Group>\n                    </Form.Row>\n\n                    <Form.Row>\n                        <Form.Group as={Col} controlId=\"formGridState\">\n                            <Form.Label>College</Form.Label>\n                            <Form.Control as=\"select\" defaultValue=\"Choose...\">\n                                <option>Choose...</option>\n                                <option>...</option>\n                            </Form.Control>\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"formGridState\">\n                            <Form.Label>College Type</Form.Label>\n                            <Form.Control as=\"select\" defaultValue=\"Choose...\">\n                                <option>Choose...</option>\n                                <option>Community College</option>\n                                <option>Senior College</option>\n                                <option>Graduate School</option>\n                            </Form.Control>\n                        </Form.Group>\n                    </Form.Row><br></br>\n\n                    <h6>I am a:</h6> <br></br>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-4\">\n                            <label htmlFor=\"developer\">Developer</label>\n                            <img src=\"https://static.thenounproject.com/png/962492-200.png\"\n                                width=\"auto\" height=\"50px\" alt=\"\" />\n                            <input type=\"radio\" id=\"developer\" name=\"search\"></input>\n                        </div>\n\n                        <div className=\"form-group col-md-4\">\n                            <label htmlFor=\"designer\">Designer</label>\n                            <img src=\"https://cdn2.iconfinder.com/data/icons/computer-63/100/People-Desk-02-512.png\"\n                                width=\"auto\" height=\"50px\" alt=\"\" />\n                            <input type=\"radio\" id=\"designer\" name=\"search\"></input>\n                        </div>\n\n                        <div className=\"form-group col-md-4\">\n                            <label htmlFor=\"marketer\">Marketer</label>\n                            <img src=\"https://static.thenounproject.com/png/693589-200.png\" width=\"auto\" height=\"50px\" alt=\"\" />\n                            <input type=\"radio\" id=\"marketer\" name=\"search\"></input>\n                        </div>\n\n                    </div>\n                    <br></br><br></br>\n                    <div className=\"form-group col-md-12\">\n                        <label htmlFor=\"year\">Year:</label>\n                        <span id=\"slider_value2\"></span><br></br>\n                        <input type=\"button\" value=\"-\" onClick=\"subtract_one()\" />\n                        1 <input type=\"range\" min=\"1\"\n                            max=\"6\" step=\"1\" name=\"sld6\"\n                            onChange=\"show_value2(this.value)\" /> 6\n                        <input type=\"button\" value=\"+\" onClick=\"add_one()\" />\n                    </div>\n                    <br></br><br></br>\n\n                    <fieldset>\n                        <Row>\n                            <Form.Label as=\"legend\">\n                                <h6>I'm good at:</h6>\n                            </Form.Label><br></br>\n                            <Col>\n                                <Form.Check inline\n                                    type=\"checkbox\"\n                                    label=\"Coding\"\n                                    name=\"formHorizontalRadios\"\n                                    id=\"formHorizontalRadios1\"\n                                />\n                            </Col>\n\n                            {['radio'].map((type) => (\n                                <div key={`-${type}`} className=\"mb-3\">\n                                    <Form.Check label=\"Beginner\" type={type} id={`-${type}-Beginner`} />\n                                    <Form.Check label=\"Intermediate\" type={type} id={`-${type}-Intermidiate`} />\n                                    <Form.Check label=\"Pro\" type={type} id={`-${type}-Pro`} />\n\n                                </div>\n                            ))}\n\n                            <Col>\n                                <Form.Check inline\n                                    type=\"checkbox\"\n                                    label=\"Design\"\n                                    name=\"formHorizontalRadios\"\n                                    id=\"formHorizontalRadios2\"\n                                />\n                            </Col>\n\n                            {['radio'].map((type) => (\n                                <div key={`-${type}`} className=\"mb-3\">\n                                    <Form.Check label=\"Beginner\" type={type} id={`-${type}-Beginner`} />\n                                    <Form.Check label=\"Intermediate\" type={type} id={`-${type}-Intermidiate`} />\n                                    <Form.Check label=\"Pro\" type={type} id={`-${type}-Pro`} />\n                                </div>\n                            ))}\n\n                            <Col>\n                                <Form.Check inline\n                                    type=\"checkbox\"\n                                    label=\"Marketing\"\n                                    name=\"formHorizontalRadios\"\n                                    id=\"formHorizontalRadios3\"\n                                />\n                            </Col>\n\n                            {['radio'].map((type) => (\n                                <div key={`-${type}`} className=\"mb-3\">\n                                    <Form.Check label=\"Beginner\" type={type} id={`-${type}-Beginner`} />\n                                    <Form.Check label=\"Intermediate\" type={type} id={`-${type}-Intermidiate`} />\n                                    <Form.Check label=\"Pro\" type={type} id={`-${type}-Pro`} />\n                                </div>\n                            ))}\n\n                            <Col>\n                                <Form.Check inline\n                                    type=\"checkbox\"\n                                    label=\"Business\"\n                                    name=\"formHorizontalRadios\"\n                                    id=\"formHorizontalRadios3\"\n                                />\n                            </Col>\n\n                            {['radio'].map((type) => (\n                                <div key={`-${type}`} className=\"mb-3\">\n                                    <Form.Check label=\"Beginner\" type={type} id={`-${type}-Beginner`} />\n                                    <Form.Check label=\"Intermediate\" type={type} id={`-${type}-Intermidiate`} />\n                                    <Form.Check label=\"Pro\" type={type} id={`-${type}-Pro`} />\n                                </div>\n                            ))}\n                        </Row>\n                    </fieldset>\n\n                    <br></br>\n\n                    <h6>I've got proof:</h6>\n                    <Form.Group as={Col} controlId=\"formGridEmail\">\n                        <Form.Label>Linkedin</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"www.linkedin.com/in/JohnSmith/\" />\n                    </Form.Group>\n\n                    <Form.Group as={Col} controlId=\"formGridPassword\">\n                        <Form.Label>GitHub</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"github.com/JohnSmith\" />\n                    </Form.Group>\n\n                    <br></br><br></br>\n\n                    <h6>I'm looking for:</h6> <br></br>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-4\">\n                            <img src=\"https://static.thenounproject.com/png/962492-200.png\"\n                                width=\"auto\" height=\"50px\" alt=\"\" />\n                            <input type=\"checkbox\" id=\"developer\" name=\"search\"></input>\n                            <label htmlFor=\"developer\">Developer</label>\n                        </div>\n                        <div className=\"form-group col-md-4\">\n                            <img src=\"https://cdn2.iconfinder.com/data/icons/computer-63/100/People-Desk-02-512.png\"\n                                width=\"auto\" height=\"50px\" alt=\"\" />\n                            <input type=\"checkbox\" id=\"designer\" name=\"search\"></input>\n                            <label htmlFor=\"designer\">Designer</label>\n                        </div>\n                        <div className=\"form-group col-md-4\">\n                            <img src=\"https://static.thenounproject.com/png/693589-200.png\"\n                                width=\"auto\" height=\"50px\" alt=\"\" />\n                            <input type=\"checkbox\" id=\"marketer\" name=\"search\"></input>\n                            <label htmlFor=\"marketer\">Marketer</label>\n                        </div>\n\n                    </div><br></br><br></br>\n\n                    <h6>In order to:</h6> <br></br>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-3\">\n                            <input type=\"radio\" className=\"compete\" name=\"purpose\"></input>\n                            <label htmlFor=\"compete\">Compete in a Hackathon</label>\n                        </div>\n                        <div className=\"form-group col-md-3\">\n                            <input type=\"radio\" className=\"compete\" name=\"purpose\"></input>\n                            <label htmlFor=\"compete\">Build a Startup</label>\n                        </div>\n                        <div className=\"form-group col-md-3\">\n                            <input type=\"radio\" className=\"compete\" name=\"purpose\"></input>\n                            <label htmlFor=\"compete\">Compete in a business plan competition</label>\n                        </div>\n                        <div className=\"form-group col-md-3\">\n                            <input type=\"radio\" className=\"compete\" name=\"purpose\"></input>\n                            <label htmlFor=\"compete\">Work on a group project</label>\n                        </div>\n                    </div>\n                    <br></br><br></br>\n                    <Button variant=\"secondary\" type=\"submit\">\n                        Submit\n                    </Button>\n                </Form>\n                <br></br>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport './App.css';\nimport SababaForm from './Form.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <SababaForm />\n    </div>\n  );\n}\n\n\nexport default App;","\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","  import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}